pipeline {
    agent any
    environment {
        AWS_ACCOUNT_ID = '600627339676'
        REGION = 'ap-south-1'
        ECR_REPO_NAME = 'shopaxis-repo'
        DOCKER_IMAGE = "${AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/${ECR_REPO_NAME}"
        EC2_HOST = 'ec2-3-110-44-132.ap-south-1.compute.amazonaws.com'
        
        EC2_USER = 'ec2-user'
        EC2_PATH = '/home/ec2-user'
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'dev', url: 'https://github.com/KunalShirsat/ShopAxis.git'
            }
        }
        stage('Build') {
            steps {
                script {
                    dir('productservice/ProductService') {
                        bat 'mvn clean package -DskipTests'
                    }
                }
            }
        }
        stage('Docker Build') {
            steps {
                script {
                    dir('productservice/ProductService') {
                        dockerImage = docker.build("${DOCKER_IMAGE}:latest")
                    }
                }
            }
        }
        stage('Save Docker Image as TAR') {
            steps {
                script {
                    // Save Docker image as tar file
                    bat """
                    docker save -o ${WORKSPACE}/productservice/ProductService/${ECR_REPO_NAME}_latest.tar ${DOCKER_IMAGE}:latest
                    """
                }
            }
        }
        stage('Deploy to EC2') {
            steps {
                script {
                    // Copy the saved Docker image to EC2 instance
                    bat """
                    scp ${WORKSPACE}/productservice/ProductService/${ECR_REPO_NAME}_latest.tar ${EC2_USER}@${EC2_HOST}:${EC2_PATH}
                    """

                    // SSH into EC2 and load the Docker image
                    bat """
                    ssh ${EC2_USER}@${EC2_HOST} "docker load -i ${EC2_PATH}/${ECR_REPO_NAME}_latest.tar && docker-compose -f ${EC2_PATH}/docker-compose.yml up -d"
                    """
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
