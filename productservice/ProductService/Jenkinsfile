pipeline {
    agent any
    environment {
        AWS_ACCOUNT_ID = '600627339676'
        REGION = 'ap-south-1'
        ECR_REPO_NAME = 'shopaxis-repo'
        DOCKER_IMAGE = "${AWS_ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/${ECR_REPO_NAME}"
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'dev', url: 'https://github.com/KunalShirsat/ShopAxis.git'
            }
        }
        stage('Build') {
            steps {
                script {
                    dir('productservice/ProductService') {
                        bat 'mvn clean package -DskipTests'
                    }
                }
            }
        }
        stage('Docker Build') {
            steps {
                script {
                    dir('productservice/ProductService') {
                        dockerImage = docker.build("${DOCKER_IMAGE}:latest")
                    }
                }
            }
        }
        stage('Login to AWS ECR') {
            steps {
                // Use Jenkins credentials securely
                withCredentials([usernamePassword(credentialsId: 'aws-credentials', usernameVariable: 'AWS_ACCESS_KEY_ID', passwordVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    script {
                        // Configure AWS CLI to use the credentials
                        bat """
                        aws configure set aws_access_key_id \$AWS_ACCESS_KEY_ID
                        aws configure set aws_secret_access_key \$AWS_SECRET_ACCESS_KEY
                        aws configure set region $REGION
                        aws ecr get-login-password --region $REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$REGION.amazonaws.com
                        """
                    }
                }
            }
        }
        stage('Push to ECR') {
            steps {
                script {
                    dockerImage.push("latest")
                }
            }
        }
        stage('Deploy to EC2 via AWS SSM') {
            steps {
                script {
                    // Copy docker-compose.yml file to EC2 instance via AWS SSM
                    bat """
                    aws ssm send-command --instance-ids $EC2_INSTANCE_ID --document-name "AWS-RunShellScript" --parameters 'commands=["mkdir -p /home/ec2-user/docker", "aws s3 cp s3://your-bucket-name/productservice/ProductService/docker-compose.yml /home/ec2-user/docker/docker-compose.yml"]' --region $REGION
                    """

                    // Run docker-compose command on the EC2 instance via AWS SSM
                    bat """
                    aws ssm send-command --instance-ids $EC2_INSTANCE_ID --document-name "AWS-RunShellScript" --parameters 'commands=["cd /home/ec2-user/docker && docker-compose up -d"]' --region $REGION
                    """
                }
            }
        }
    }
    post {
        always {
            cleanWs()
        }
    }
}
